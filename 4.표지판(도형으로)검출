import cv2
import numpy as np

# 웹캠 또는 비디오 스트림 열기
cap = cv2.VideoCapture(0)  # 웹캠 사용 시 0을 사용, 비디오 파일을 사용하려면 파일 경로를 지정

# 프레임 크기 설정 (예: 640x480)
cap.set(3, 640)  # 가로 크기를 640 픽셀로 설정
cap.set(4, 480)  # 세로 크기를 480 픽셀로 설정

# 사용할 변수들 미리 정의
FONT = cv2.FONT_HERSHEY_DUPLEX
BLUE = (255, 0, 0)
GREEN = (0, 255, 0)
RED = (0, 0, 255)
FILTER_RATIO = 0.85

# 경계선을 가져오는 함수
def get_contours(img, min_area, is_simple=False):
    if is_simple:
        contours, _ = cv2.findContours(img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    else:
        contours, _ = cv2.findContours(img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)

    result = []

    for cnt in contours:
        if cv2.contourArea(cnt) > min_area:
            result.append(cnt)

    return result

# 원형인지 여부를 반환하는 함수
def is_circle(cnt):
    cnt_length = cv2.arcLength(cnt, True)
    cnt_area = cv2.contourArea(cnt)

    ratio = 4 * np.pi * cnt_area / (cnt_length ** 2)

    if ratio > FILTER_RATIO:
        return True
    else:
        return False

# 꼭짓점을 그리는 함수
def draw_points(img, cnt, epsilon, color):
    cnt_length = cv2.arcLength(cnt, True)
    approx = cv2.approxPolyDP(cnt, epsilon * cnt_length, True)

    for point in approx:
        cv2.circle(img, (point[0][0], point[0][1]), 3, color, -1)

while True:
    ret, frame = cap.read()
    if not ret:
        break

    # 이미지를 그레이스케일로 변환
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # 가우시안 블러 적용
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)

    # Canny 엣지 검출
    edges = cv2.Canny(blurred, 50, 150)

    # 컨투어 검출
    contours_simple = get_contours(edges, 100, True)

    for cnt in contours_simple:
        cv2.drawContours(frame, [cnt], -1, BLUE, 2)
        if is_circle(cnt):
            draw_points(frame, cnt, 0.05, RED)
        else:
            draw_points(frame, cnt, 0.05, GREEN)

    cv2.imshow("Real-time Shape Detection", frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()

